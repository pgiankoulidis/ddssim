//
// Generated file, do not edit! Created by nedtool 5.0 from stream_message.msg.
//

#ifndef __STREAM_MESSAGE_M_H
#define __STREAM_MESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>stream_message.msg:20</tt> by nedtool.
 * <pre>
 * enum UpdateOp
 * {
 * 
 *     INSERT = 1;
 *     DELETE = 2;
 * }
 * </pre>
 */
enum UpdateOp {
    INSERT = 1,
    DELETE = 2
};

/**
 * Class generated from <tt>stream_message.msg:26</tt> by nedtool.
 * <pre>
 * packet StreamMessage
 * {
 *     int update @enum(UpdateOp);
 *     int64_t value;
 * }
 * </pre>
 */
class StreamMessage : public ::omnetpp::cPacket
{
  protected:
    int update;
    int64_t value;

  private:
    void copy(const StreamMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const StreamMessage&);

  public:
    StreamMessage(const char *name=nullptr, int kind=0);
    StreamMessage(const StreamMessage& other);
    virtual ~StreamMessage();
    StreamMessage& operator=(const StreamMessage& other);
    virtual StreamMessage *dup() const {return new StreamMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getUpdate() const;
    virtual void setUpdate(int update);
    virtual int64_t getValue() const;
    virtual void setValue(int64_t value);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const StreamMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, StreamMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __STREAM_MESSAGE_M_H

